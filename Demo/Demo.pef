#include "../Core/PropertyCore.h"
#include "../Core/PropertyGUI.h"

#include_cpp <QFileDialog>

enum COLOR
{
    red (1, "red"),
    blue (2, "blue"),
    green (3, "green")
}

enum FLAGS
{
    opt1(1, "Option1"),
    opt2(2, "Option2"),
    opt3(4, "Option3")
}

property_set Main
{
    Int count
    {
        description = "Count is a number of items.";
        value = 5;
    }

    Bool isValid
    {
        description = "Validation flag.";
        value = false;

        slot propertyDidChange
        {
            Internal.switchState(QtnPropertyStateImmutable, !isValid);
        }
    }

    property_set Internal Internal
    {
        state = QtnPropertyStateImmutable;
        QString name
        {
            description = "Name of the item.";
            value = "Item";
        }

        QRect rect
        {
            value = QRect(10, 23, 19, 2);
            //rectMode = PropertyQRectModeLeftTopRightBottom;
        }

        QString item1
        {
            value = "Item1";
        }
        QString item2
        {
            value = "Item2";
        }
        QString item3
        {
            value = "Item3";
        }
        QString item4
        {
            value = "Item4";
        }
        QString item5
        {
            value = "Item5";
        }

        Bool item6;
        Bool item7
        {
            delegate ComboBox;
        }

        Enum item8
        {
            value = COLOR::red;
            enumInfo = &COLOR::info();
        }

        QColor item9
        {
            value = QColor(100, 100, 100);
            delegate { shape = QtnColorDelegateShapeCircle; }
        }
    }

    Bool flag
    {
        Value = false;
        delegate ComboBox;
    }

    property_set SubProperties Supplementary
    {
        description = "Supplementary <b>description</b>";

        Int intProp
        {
            value = -6;
            maxValue = 10;
            minValue = -10;
            stepValue = 2;
        }

        UInt uintProp
        {
            value = 323;
        }

        Double doubleProp
        {
            value = 762.453;
        }

        Float floatProp
        {
            value = 0.234f;
            minValue = 0;
            maxValue = 1.f;
            stepValue = 0.001f;
        }

        Bool boolProp
        {
            value = true;

            delegate ComboBox
            {
                labelTrue = "On";
                labelFalse = "Off";
            }
        }

        Enum enumProp
        {
            value = COLOR::green;
            enumInfo = &COLOR::info();
        }

        QColor colorProp
        {
            value = "red";
        }

        EnumFlags flagsProp
        {
            enumInfo = &FLAGS::info();
            value = FLAGS::opt2 | FLAGS::opt3;
        }

        QString fileName1
        {
            delegate File;
        }

        QString fileName2
        {
            value = "file name";
            delegate File
            {
                invalidColor = QColor(Qt::blue);
                acceptMode = QFileDialog::AcceptSave;
                nameFilters = QStringList() << "PDF files (*.pdf)" << "All files (*)";
            }
        }

        QPoint pointProp
        {
            value = QPoint(12, 2);
            description = "Point property.";
        }

        QSize sizeProp
        {
            value = QSize(22, 34);
            description = "Size property.";
        }

        QFont fontProp
        {
            value = QFont();
            description = "Font property.";
        }

        QString listProp
        {
            value = "one";
            delegate List
            {
                items = QStringList() << "one" << "two" << "three";
            }
        }
    }
}

property_set SamplePS
{
    Bool BoolProperty
    {
        description = "Property to hold boolean values.";
        value = false;
    }

    Double DoubleProperty
    {
        description = "Property to hold double values in range [10, 20].";
        value = 12.3;
        minValue = 10;
        maxValue = 20;
        stepValue = 0.5;
    }

    Float FloatProperty
    {
        description = "Property to hold float values in range [-10, 0].";
        value = -3.5;
        minValue = -10;
        maxValue = 0;
        stepValue = 0.5;
    }

    Int IntProperty
    {
        description = "Property to hold integer values with changing step 15.";
        value = 10;
        stepValue = 15;
    }

    UInt UIntProperty
    {
        description = "Property to hold unsigned integer values in range [100, 200].";
        value = 100;
        minValue = 100;
        maxValue = 200;
    }

    Enum EnumProperty
    {
        description = "Property to hold enum value (color).";
        enumInfo = &COLOR::info();
        value = COLOR::red;
    }

    EnumFlags EnumFlagsProperty
    {
        description = "Property to hold combination of enum values (options).";
        enumInfo = &FLAGS::info();
        value = FLAGS::opt2;
    }

    QString QStringValue
    {
        description = "Property to hold QString value.";
        value = "Hello world!";
    }

    QPoint QPointProperty
    {
        description = "Property to hold QPoint value.";
        value = QPoint(-10, 10);
    }

    QSize QSizeProperty
    {
        description = "Property to hold QSize value.";
        value = QSize(100, 200);
    }

    QRect QRectProperty
    {
        description = "Property to hold QRect value.";
        value = QRect(10, 10, 200, 200);
    }

    QColor QColorProperty
    {
        description = "Property to hold QColor value.";
        value = Qt::blue;
    }

    QFont QFontProperty
    {
        description = "Property to hold QFont value.";
        value = QFont("Sans Serif", 14);
    }

    Bool EnableSubPropertySet
    {
        description = "Enable/Disable Sub-PropertySet.";
        value = false;

        slot propertyDidChange
        {
            SubPropertySet.switchState(QtnPropertyStateImmutable, !EnableSubPropertySet);
        }
    }

    property_set SubPropertySetType SubPropertySet
    {
        description = "This property set is part of the root property set.";
        state = QtnPropertyStateImmutable;

        Bool SwitchProperty
        {
            description = "Boolean property with customized True/False values.";
            value = true;

            delegate ComboBox
            {
                labelTrue = "On";
                labelFalse = "Off";
            }
        }

        QStringCallback ReadOnlyString
        {
            description = "This property is callback and read-only.";
            state = QtnPropertyStateImmutable;
            callbackValueGet = [this] ()->QString {
                if (SwitchProperty)
                    return "Switch is on";
                else
                    return "Switch is off";
            };
        }

        QString FileNameProperty
        {
            description = "QString property tuned to handle file names.";
            value = "~/test_file.txt";
            delegate File
            {
                invalidColor = QColor(Qt::red);
                acceptMode = QFileDialog::AcceptSave;
                nameFilters = QStringList() << "Text files (*.txt)" << "All files (*)";
            }
        }

        QString FolderNameProperty
        {
            description = "QString property tuned to handle folder names.";
            value = "/var";
            delegate File
            {
                invalidColor = QColor(Qt::blue);
                fileMode = QFileDialog::DirectoryOnly;
            }
        }

        QString StringFromList
        {
            description = "QString property with list of acepted values (one, two, three, four).";
            value = "two";
            delegate List
            {
                items = QStringList() << "one" << "two" << "three" << "four";
            }
        }

        QColor CircleShapeColor
        {
            description = "QColor property with delegate tuned to draw circle";
            value = QColor(255, 100, 100);
            delegate { shape = QtnColorDelegateShapeCircle; }
        }
    }
}
